# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import psycopg2
from config import DB_CONFIG

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from src.api_loader import loader_vacancy, loader_company, company_top
from src.utils import insert_employers, insert_vacancies
from src.database import create_database, create_tables
from src.db_manager import DBManager


def user_interface(text):
    manager = DBManager()
    if text == '–¥–∞':
        employer_id_top = [
            '9013908',  # –ù–≠–í–ó ‚úÖ+
            '39305',    # –ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å ‚úÖ+
            '4592004',  # –±–∏–ª–∞–π–Ω ‚úÖ+
            '749858',   # –í–¢–ë ‚úÖ+
            '80',       # –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ ‚úÖ+
            '3443',     # –¥–æ–º.—Ä—Ñ ‚úÖ+
            '592442',   # Mail.ru Group ‚úÖ+
            '4996233',  # –†–æ—Å–Ω–µ—Ñ—Ç—å ‚úÖ+
            '11454714', # –ú–∞–≥–Ω–∏—Ç ‚úÖ+
            '9777667',  # –†–æ—Å–∞—Ç–æ–º ‚úÖ+
            '1122462',  # SkyEng ‚úÖ+
            '4496',     #–ú–¢–° –ë–∞–Ω–∫ ‚úÖ+
            '31050'     #–†–∏–≤ –ì–æ—à  ‚úÖ+
        ]
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...")
        vacancies_list = company_top(employer_id_top)

        if not vacancies_list:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        found_employers = set()
        for vac in vacancies_list:
            emp = vac.get('employer')
            if emp:
                found_employers.add(emp['id'])

        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏: {found_employers}")

        seen = set()
        unique_employers = []
        for vac in vacancies_list:
            emp = vac.get('employer')
            if emp and emp['id'] not in seen:
                seen.add(emp['id'])
                unique_employers.append(emp)

        print(f"üíº –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(unique_employers)} —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π...")
        insert_employers(unique_employers)

        print(f"üíº –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(vacancies_list)} –≤–∞–∫–∞–Ω—Å–∏–π...")
        insert_vacancies(vacancies_list)

    elif text == '–Ω–µ—Ç':
        user_input = input("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç –æ–¥–Ω–æ–π –¥–æ 10 –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").lower().strip()
        names = user_input.split()
        if len(names) > 10:
            print("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 10 –∫–æ–º–ø–∞–Ω–∏–π")
            return

        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...")
        load = loader_vacancy(user_input)  # –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        filter = loader_company(load)  # –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —ç—Ç–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π

        if not load:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è.")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(load)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")
        #
        # employers_set = [vac['employer'] for vac in load if vac.get('employer')]
        # insert_employers(employers_set)
        #
        # print("üíº –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π...")
        # if not filter:
        #     print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        #     return
        #
        # print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filter)} –≤–∞–∫–∞–Ω—Å–∏–π")
        # insert_vacancies(filter)
        insert_employers(filter)

        print("üíº –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π...")
        if not filter:
            print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filter)} –≤–∞–∫–∞–Ω—Å–∏–π")
        insert_vacancies(filter)

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
        print("2. –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        print("4. –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        print("5. –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

        if choice == "1":
            res = manager.get_companies_and_vacancies_count()
            print("\nüè¢ –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
            for name, count in res:
                print(f"{name}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")

        elif choice == "2":
            res = manager.get_all_vacancies()
            print("\nüíº –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
            for item in res:
                print(item)

        elif choice == "3":
            avg = manager.get_avg_salary()
            print(f"\nüí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg:.2f}")

        elif choice == "4":
            avg = manager.get_avg_salary()
            res = manager.get_vacancies_with_higher_salary(avg)
            print(f"\nüìà –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π ({avg:.2f}):")
            for item in res:
                print(item)

        elif choice == "5":
            word = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ")
            res = manager.get_vacancies_with_keyword(word)
            print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{word}':")
            for item in res:
                print(item)

        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    else:
        print('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"!')

    manager.close()


if __name__ == "__main__":
    create_database()
    create_tables()

    while True:
        user_question = input("–í—ã–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–æ–ø 10 –∫–æ–º–ø–∞–Ω–∏–π: –¥–∞/–Ω–µ—Ç ").strip().lower()
        if user_question in ['–¥–∞', '–Ω–µ—Ç']:
            break
        else:
            print('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"!')

    user_interface(user_question)