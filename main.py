from src.api_class import HeadHunterAPI
from src.utils import insert_employers, insert_vacancies, clear_employers_table, clear_vacancies_table
from src.database import create_database, create_tables
from src.db_manager import DBManager


def user_interface(text):
    if text == '–¥–∞':
        api = HeadHunterAPI()
        user_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'): ").lower()
        try:
            # –®–∞–≥ 1: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            vacancies = api.get_vacancies(keyword=user_input, per_page=10)

            print(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")

            # –®–∞–≥ 2: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –∏–∑ —ç—Ç–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            insert_employers(vacancies)

            # –®–∞–≥ 3: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ —É–∂–µ –≤ –ë–î)
            insert_vacancies(vacancies)

            # –®–∞–≥ 4: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö

            manager = DBManager()
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
            print("2. –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
            print("3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
            print("4. –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
            print("5. –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")

            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")
            if choice == "1":
                res = manager.get_companies_and_vacancies_count()
                print("\nüè¢ –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
                for name, count in res:
                    print(f"{name}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")
                    print("*"*50)

            elif choice == "2":
                res = manager.get_all_vacancies()
                print("\nüíº –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
                for item in res:
                    print(item)
                    print("*" * 50)

            elif choice == "3":
                avg = manager.get_avg_salary()
                print(f"\nüí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg:.2f}")
                print("*" * 50)

            elif choice == "4":
                avg = manager.get_avg_salary()
                res = manager.get_vacancies_with_higher_salary(avg)
                print(f"\nüìà –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π ({avg:.2f}):")
                for item in res:
                    print(item)
                    print("*" * 50)

            elif choice == "5":
                word = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ")
                res = manager.get_vacancies_with_keyword(word)
                print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{word}':")
                for item in res:
                    print(item)
                    print("*" * 50)

            else:
                print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")

        finally:
            manager.close()

    else:
        api = HeadHunterAPI()
        user_input = input('–í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ').lower()
        result = api.find_vacancies_by_company_names(user_input)
        insert_employers(result)
        insert_vacancies(result)



if __name__ == "__main__":
        create_database()
        create_tables()
        clear_employers_table()
        clear_vacancies_table()

        while True:
            user_question = input("–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–æ–ø 10 –∫–æ–º–ø–∞–Ω–∏–π: –¥–∞/–Ω–µ—Ç ").strip().lower()
            if user_question in ['–¥–∞', '–Ω–µ—Ç']:
                break
            else:
                print('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"!')

        user_interface(user_question)